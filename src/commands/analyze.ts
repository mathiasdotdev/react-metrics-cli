import { Command } from 'commander';
import { BinaryExecutor, ExecutionOptions } from '../core/binary/BinaryExecutor';
import { BinaryManager } from '../core/binary/BinaryManager';
import { Logger } from '../ui/logger/Logger';
import { CommandWrapper } from '../ui/wrapper/CommandWrapper';

export interface AnalyzeCommandOptions {
  path?: string;
  debug?: boolean;
}

export class AnalyzeCommand {
  private binaryManager: BinaryManager;

  constructor() {
    this.binaryManager = new BinaryManager();
  }

  /**
   * Ex√©cute la commande d'analyse
   */
  async execute(options: AnalyzeCommandOptions): Promise<void> {
    try {
      // T√©l√©charger le binaire automatiquement avec la structure simplifi√©e
      const binaryPath = await this.ensureBinaryAvailable();

      await this.runAnalysis(options, binaryPath);
    } catch (error) {
      if (error instanceof Error) {
        if (error.message.includes('ENOENT')) {
          Logger.error('Binaire react-metrics non trouv√©');
          Logger.warn('üí° Utilisez "react-metrics download" pour t√©l√©charger le binaire');
          Logger.warn('üí° Ou configurez Nexus avec "react-metrics config"');
        } else if (error.message.includes('spawn')) {
          Logger.error("Impossible d'ex√©cuter le binaire");
          Logger.warn("üí° V√©rifiez les permissions d'ex√©cution du binaire");
        } else {
          Logger.error(error.message);
        }
      } else {
        Logger.error(`Erreur inattendue: ${error}`);
      }
      process.exit(1);
    }
  }

  /**
   * S'assure que le binaire est disponible et le t√©l√©charge si n√©cessaire
   */
  private async ensureBinaryAvailable(): Promise<string> {
    try {
      // Utiliser la m√©thode de t√©l√©chargement avec la structure simplifi√©e
      const binaryPath = await this.binaryManager.downloadReactMetricsBinary();

      if (!binaryPath) {
        throw new Error('Impossible de t√©l√©charger le binaire react-metrics');
      }

      return binaryPath;
    } catch (error) {
      if (error instanceof Error) {
        if (
          error.message.includes("Fichier d'identifiants Nexus non trouv√©") ||
          error.message.includes('USERNAME ou PASSWORD manquant') ||
          error.message.includes('401') ||
          error.message.includes('403') ||
          error.message.includes('Unauthorized') ||
          error.message.includes("Impossible de configurer l'authentification Nexus")
        ) {
          Logger.error('\n√âchec du t√©l√©chargement');
          Logger.warn("üí° Probl√®me d'authentification Nexus");
          Logger.warn('üí° Vos credentials Nexus ne sont pas configur√©s');
          Logger.warn('üí° La commande aurait d√ª vous demander vos credentials');
          Logger.warn('üí° Si n√©cessaire, supprimez le fichier de credentials pour recommencer:');
          Logger.colored('cyan', `   ${require('os').homedir()}/.nexus-utils/.credentials`);
          throw new Error('Authentication Nexus √©chou√©e. Configurez vos credentials.');
        } else if (
          error.message.includes('ENOTFOUND') ||
          error.message.includes('ECONNREFUSED') ||
          error.message.includes('getaddrinfo')
        ) {
          Logger.error('\n√âchec du t√©l√©chargement');
          Logger.warn('üí° Serveur Nexus inaccessible');
          Logger.warn(
            'üí° V√©rifiez votre connexion r√©seau ou que https://nexus.maif.io est accessible',
          );
          throw new Error('Serveur Nexus inaccessible. V√©rifiez votre r√©seau.');
        }
      }

      Logger.error(`Erreur lors du t√©l√©chargement: ${error}`);
      throw error;
    }
  }

  /**
   * Ex√©cute l'analyse avec le binaire
   */
  private async runAnalysis(options: AnalyzeCommandOptions, binaryPath: string): Promise<void> {
    const executor = new BinaryExecutor(binaryPath);

    // Pr√©parer les options d'ex√©cution
    const executionOptions: ExecutionOptions = {
      projectPath: options.path || process.cwd(),
      debug: options.debug || false,
    };

    Logger.info(`üîç Analyse du projet: ${executionOptions.projectPath}`);

    if (executionOptions.debug) {
      Logger.debug('üêõ Mode debug activ√©');
    }

    // Ex√©cuter l'analyse
    const result = await executor.execute(executionOptions);

    // Afficher les r√©sultats
    if (!result.success) {
      Logger.error("\nL'analyse a √©chou√©");
      if (result.stderr) {
        Logger.error('Erreurs:');
        Logger.error(result.stderr);
      }
      process.exit(result.exitCode);
    }

    // Afficher les informations de debug si activ√©
    if (executionOptions.debug) {
      Logger.info(`üìù Logs debug disponibles dans: output/logs/react-metrics-debug.log`);
    }
  }
}

/**
 * Cr√©e et configure la commande analyze
 */
export function createAnalyzeCommand(): Command {
  const analyzeCmd = CommandWrapper.createCompactCommand()
    .command('analyze [path]')
    .description('Analyse un projet React pour d√©tecter le code mort')
    .option('-d, --debug', 'Activer le mode debug (g√©n√®re un fichier de log d√©taill√©)')
    .action(async (path: string | undefined, options: { debug?: boolean }) => {
      try {
        const analyzeCommand = new AnalyzeCommand();
        await analyzeCommand.execute({
          path,
          debug: options.debug,
        });
      } catch (error) {
        Logger.error(`Erreur: ${error}`);
        process.exit(1);
      }
    });

  return analyzeCmd;
}
