import chalk from 'chalk'
import { Command } from 'commander'
import { BinaryExecutor, ExecutionOptions } from '../core/binary/BinaryExecutor'
import { BinaryManager } from '../core/binary/BinaryManager'
import { CommandWrapper } from '../ui/wrapper/CommandWrapper'

export interface AnalyzeCommandOptions {
  path?: string
  debug?: boolean
  local?: boolean
}

export class AnalyzeCommand {
  private binaryManager: BinaryManager

  constructor() {
    this.binaryManager = new BinaryManager()
  }

  /**
   * Ex√©cute la commande d'analyse
   */
  async execute(options: AnalyzeCommandOptions): Promise<void> {
    try {
      // Configurer le mode local si demand√©
      if (options.local) {
        process.env.NEXUS_LOCAL = 'true'
        console.log(
          chalk.blue('üè† Mode local activ√© (Nexus sur localhost:8081)')
        )
      }

      // T√©l√©charger le binaire automatiquement avec la structure simplifi√©e
      const binaryPath = await this.ensureBinaryAvailable()

      await this.runAnalysis(options, binaryPath)
    } catch (error) {
      if (error instanceof Error) {
        if (error.message.includes('ENOENT')) {
          console.error(chalk.red('‚ùå Binaire react-metrics non trouv√©'))
          console.error(
            chalk.yellow(
              'üí° Utilisez "react-metrics download" pour t√©l√©charger le binaire'
            )
          )
          console.error(
            chalk.yellow('üí° Ou configurez Nexus avec "react-metrics config"')
          )
        } else if (error.message.includes('spawn')) {
          console.error(chalk.red("‚ùå Impossible d'ex√©cuter le binaire"))
          console.error(
            chalk.yellow("üí° V√©rifiez les permissions d'ex√©cution du binaire")
          )
        } else {
          console.error(chalk.red(`‚ùå ${error.message}`))
        }
      } else {
        console.error(chalk.red(`‚ùå Erreur inattendue: ${error}`))
      }
      process.exit(1)
    }
  }

  /**
   * S'assure que le binaire est disponible et le t√©l√©charge si n√©cessaire
   */
  private async ensureBinaryAvailable(): Promise<string> {
    try {
      // Utiliser la m√©thode de t√©l√©chargement avec la structure simplifi√©e
      const binaryPath = await this.binaryManager.downloadReactMetricsBinary()

      if (!binaryPath) {
        throw new Error('Impossible de t√©l√©charger le binaire react-metrics')
      }

      return binaryPath
    } catch (error) {
      if (error instanceof Error) {
        if (
          error.message.includes("Fichier d'identifiants Nexus non trouv√©") ||
          error.message.includes('USERNAME ou PASSWORD manquant') ||
          error.message.includes('401') ||
          error.message.includes('403') ||
          error.message.includes('Unauthorized') ||
          error.message.includes('Impossible de configurer l\'authentification Nexus')
        ) {
          console.error(chalk.red('\n‚ùå √âchec du t√©l√©chargement'))
          console.error(chalk.yellow('üí° Probl√®me d\'authentification Nexus'))
          console.error(chalk.yellow('üí° Vos credentials Nexus ne sont pas configur√©s'))
          console.error(chalk.yellow('üí° La commande aurait d√ª vous demander vos credentials'))
          console.error(chalk.yellow('üí° Si n√©cessaire, supprimez le fichier de credentials pour recommencer:'))
          console.error(chalk.cyan(`   ${require('os').homedir()}/.nexus-utils/.credentials`))
          throw new Error(
            'Authentication Nexus √©chou√©e. Configurez vos credentials.'
          )
        } else if (
          error.message.includes('ENOTFOUND') ||
          error.message.includes('ECONNREFUSED') ||
          error.message.includes('getaddrinfo')
        ) {
          console.error(chalk.red('\n‚ùå √âchec du t√©l√©chargement'))
          console.error(chalk.yellow('üí° Serveur Nexus inaccessible'))
          console.error(chalk.yellow('üí° V√©rifiez votre connexion r√©seau'))
          console.error(
            chalk.yellow(
              'üí° Si vous testez en local, d√©finissez: NEXUS_LOCAL=true'
            )
          )
          console.error(
            chalk.yellow(
              'üí° Sinon v√©rifiez que https://nexus.maif.io est accessible'
            )
          )
          throw new Error('Serveur Nexus inaccessible. V√©rifiez votre r√©seau.')
        }
      }

      console.error(chalk.red(`‚ùå Erreur lors du t√©l√©chargement: ${error}`))
      throw error
    }
  }

  /**
   * Ex√©cute l'analyse avec le binaire
   */
  private async runAnalysis(
    options: AnalyzeCommandOptions,
    binaryPath: string
  ): Promise<void> {
    const executor = new BinaryExecutor(binaryPath)

    // Pr√©parer les options d'ex√©cution
    const executionOptions: ExecutionOptions = {
      projectPath: options.path || process.cwd(),
      debug: options.debug || false,
    }

    console.log(
      chalk.blue(`üîç Analyse du projet: ${executionOptions.projectPath}`)
    )

    if (executionOptions.debug) {
      console.log(chalk.gray('üêõ Mode debug activ√©'))
    }

    // Ex√©cuter l'analyse
    const result = await executor.execute(executionOptions)

    // Afficher les r√©sultats
    if (!result.success) {
      console.error(chalk.red("\n‚ùå L'analyse a √©chou√©"))
      if (result.stderr) {
        console.error(chalk.red('Erreurs:'))
        console.error(result.stderr)
      }
      process.exit(result.exitCode)
    }

    // Afficher les informations de debug si activ√©
    if (executionOptions.debug) {
      console.log(
        chalk.blue(
          `üìù Logs debug disponibles dans: output/logs/react-metrics-debug.log`
        )
      )
    }

  }
}

/**
 * Cr√©e et configure la commande analyze
 */
export function createAnalyzeCommand(): Command {
  const analyzeCmd = CommandWrapper.createCompactCommand()
    .command('analyze [path]')
    .description('Analyse un projet React pour d√©tecter le code mort')
    .option(
      '-d, --debug',
      'Activer le mode debug (g√©n√®re un fichier de log d√©taill√©)'
    )
    .option('-l, --local', 'Utiliser le serveur Nexus local (localhost:8081)')
    .action(
      async (
        path: string | undefined,
        options: { debug?: boolean; local?: boolean }
      ) => {
        try {
          const analyzeCommand = new AnalyzeCommand()
          await analyzeCommand.execute({
            path,
            debug: options.debug,
            local: options.local,
          })
        } catch (error) {
          console.error(chalk.red(`Erreur: ${error}`))
          process.exit(1)
        }
      }
    )

  return analyzeCmd
}
