import chalk from 'chalk'
import * as CryptoJS from 'crypto-js'
import * as fs from 'fs-extra'
import * as inquirer from 'inquirer'
import { ENCRYPTION_CONFIG, STORAGE_PATHS } from '../config/System'

interface NexusCredentials {
  username: string
  password: string
}

export class TokenManager {
  private credentialsFilePath: string
  private secretKey: string

  constructor() {
    this.credentialsFilePath = STORAGE_PATHS.TOKEN_FILE.replace(
      'nexus-token.enc',
      'nexus.credentials'
    )
    this.secretKey = ENCRYPTION_CONFIG.SECRET_KEY
  }

  /**
   * R√©cup√®re l'authentification base64 (depuis les credentials chiffr√©s ou demande √† l'utilisateur)
   */
  async getAuthToken(): Promise<string> {
    try {
      // V√©rifier si les credentials chiffr√©s existent
      if (await this.credentialsExist()) {
        console.log(chalk.blue('üîë Credentials Nexus trouv√©s dans le cache...'))

        // Demander le mot de passe ma√Ætre pour d√©chiffrer
        const masterPassword = await this.promptForMasterPassword(
          'Mot de passe pour d√©chiffrer les credentials Nexus:'
        )

        try {
          const credentials = await this.loadEncryptedCredentials(
            masterPassword
          )

          // G√©n√©rer le token base64
          const authToken = this.generateBase64Auth(
            credentials.username,
            credentials.password
          )

          // V√©rifier si les credentials sont valides (optionnel)
          if (await this.validateAuthToken(authToken)) {
            return authToken
          } else {
            console.log(
              chalk.yellow(
                '‚ö†Ô∏è  Credentials invalides, demande de nouveaux credentials...'
              )
            )
            await this.deleteCredentials()
          }
        } catch (decryptError) {
          console.log(
            chalk.red(
              '‚ùå Mot de passe de d√©chiffrement incorrect ou credentials corrompus'
            )
          )
          console.log(
            chalk.yellow('üí° Suppression des credentials existants...')
          )
          await this.deleteCredentials()
        }
      }

      // Demander les credentials √† l'utilisateur
      const credentials = await this.promptForCredentials()

      // Demander le mot de passe ma√Ætre pour chiffrer
      const masterPassword = await this.promptForMasterPassword(
        'Mot de passe pour chiffrer les credentials:'
      )

      // Sauvegarder les credentials chiffr√©s avec le mot de passe ma√Ætre
      await this.saveEncryptedCredentials(credentials, masterPassword)

      // Retourner le token base64
      return this.generateBase64Auth(credentials.username, credentials.password)
    } catch (error) {
      throw new Error(
        `Erreur lors de la r√©cup√©ration de l'authentification: ${error}`
      )
    }
  }

  /**
   * G√©n√®re un token d'authentification base64 depuis username:password
   */
  private generateBase64Auth(username: string, password: string): string {
    const credentials = `${username}:${password}`
    return Buffer.from(credentials, 'utf8').toString('base64')
  }

  /**
   * V√©rifie si le fichier de credentials existe
   */
  private async credentialsExist(): Promise<boolean> {
    try {
      await fs.access(this.credentialsFilePath)
      return true
    } catch {
      return false
    }
  }

  /**
   * Charge et d√©chiffre les credentials depuis le fichier
   */
  private async loadEncryptedCredentials(
    masterPassword: string
  ): Promise<NexusCredentials> {
    try {
      const encryptedData = await fs.readFile(this.credentialsFilePath, 'utf8')
      const bytes = CryptoJS.AES.decrypt(encryptedData, masterPassword)
      const decryptedCredentials = bytes.toString(CryptoJS.enc.Utf8)

      if (!decryptedCredentials) {
        throw new Error(
          'Impossible de d√©chiffrer les credentials - mot de passe incorrect'
        )
      }

      const credentials = JSON.parse(decryptedCredentials) as NexusCredentials

      // V√©rifier que les credentials ont la structure attendue
      if (!credentials.username || !credentials.password) {
        throw new Error('Structure des credentials invalide')
      }

      return credentials
    } catch (error) {
      if (error instanceof SyntaxError) {
        throw new Error('Mot de passe de d√©chiffrement incorrect')
      }
      throw new Error(`Erreur lors du d√©chiffrement des credentials: ${error}`)
    }
  }

  /**
   * Chiffre et sauvegarde les credentials
   */
  private async saveEncryptedCredentials(
    credentials: NexusCredentials,
    masterPassword: string
  ): Promise<void> {
    try {
      // Cr√©er le r√©pertoire si n√©cessaire
      await fs.ensureDir(STORAGE_PATHS.BINARY_ROOT_DIR)

      // S√©rialiser et chiffrer les credentials avec le mot de passe ma√Ætre
      const credentialsJson = JSON.stringify(credentials)
      const encryptedCredentials = CryptoJS.AES.encrypt(
        credentialsJson,
        masterPassword
      ).toString()

      // Sauvegarder dans le fichier
      await fs.writeFile(this.credentialsFilePath, encryptedCredentials, 'utf8')

      console.log(
        chalk.green('‚úÖ Credentials sauvegard√©s de mani√®re s√©curis√©e')
      )
      console.log(
        chalk.gray(
          'üí° Votre mot de passe sera demand√© √† chaque interaction avec Nexus'
        )
      )
    } catch (error) {
      throw new Error(`Erreur lors de la sauvegarde des credentials: ${error}`)
    }
  }

  /**
   * Demande le mot de passe ma√Ætre √† l'utilisateur
   */
  private async promptForMasterPassword(message: string): Promise<string> {
    const answer = await inquirer.default.prompt([
      {
        type: 'password',
        name: 'masterPassword',
        message,
        mask: '*',
        validate: (input: string) => {
          if (!input || input.trim().length === 0) {
            return 'Le mot de passe ne peut pas √™tre vide'
          }
          if (input.length < 6) {
            return 'Le mot de passe doit faire au moins 6 caract√®res'
          }
          return true
        },
      },
    ])

    return answer.masterPassword
  }

  /**
   * Demande les credentials √† l'utilisateur
   */
  private async promptForCredentials(): Promise<NexusCredentials> {
    console.log(chalk.cyan('\nüîê Configuration des credentials Nexus'))
    console.log(
      chalk.gray(
        'Vos credentials seront chiffr√©s et stock√©s localement pour les prochaines utilisations.'
      )
    )
    console.log(
      chalk.gray(
        "Un token d'authentification base64 sera g√©n√©r√© automatiquement.\n"
      )
    )

    const answers = await inquirer.default.prompt([
      {
        type: 'input',
        name: 'username',
        message: "Nom d'utilisateur Nexus:",
        validate: (input: string) => {
          if (!input || input.trim().length === 0) {
            return "Le nom d'utilisateur ne peut pas √™tre vide"
          }
          return true
        },
      },
      {
        type: 'password',
        name: 'password',
        message: 'Mot de passe Nexus:',
        mask: '*',
        validate: (input: string) => {
          if (!input || input.trim().length === 0) {
            return 'Le mot de passe ne peut pas √™tre vide'
          }
          return true
        },
      },
    ])

    return {
      username: answers.username.trim(),
      password: answers.password,
    }
  }

  /**
   * Valide le token d'authentification en faisant un appel test √† Nexus
   */
  private async validateAuthToken(authToken: string): Promise<boolean> {
    // TODO: Impl√©menter la validation du token avec un appel √† Nexus
    // Pour l'instant, on consid√®re que le token est valide s'il existe et a la bonne structure base64
    try {
      const decoded = Buffer.from(authToken, 'base64').toString('utf8')
      return decoded.includes(':') && decoded.split(':').length === 2
    } catch {
      return false
    }
  }

  /**
   * Supprime le fichier de credentials
   */
  async deleteCredentials(): Promise<void> {
    try {
      if (await this.credentialsExist()) {
        await fs.remove(this.credentialsFilePath)
        console.log(chalk.yellow('üóëÔ∏è  Credentials supprim√©s'))
      }
    } catch (error) {
      console.error(
        chalk.red(`Erreur lors de la suppression des credentials: ${error}`)
      )
    }
  }

  /**
   * Affiche des informations sur les credentials stock√©s
   */
  async getCredentialsInfo(): Promise<void> {
    try {
      if (await this.credentialsExist()) {
        const stats = await fs.stat(this.credentialsFilePath)

        console.log(chalk.blue('üìã Informations des credentials:'))
        console.log(chalk.gray(`   Fichier: ${this.credentialsFilePath}`))
        console.log(chalk.gray(`   Modifi√©: ${stats.mtime.toLocaleString()}`))
        console.log(chalk.gray(`   Taille: ${stats.size} bytes`))
        console.log(
          chalk.yellow(
            '‚ö†Ô∏è   Credentials chiffr√©s - mot de passe requis pour les consulter'
          )
        )
        console.log(
          chalk.gray(
            "üí°   Utilisez la commande d'analyse avec Nexus pour tester l'authentification"
          )
        )
      } else {
        console.log(chalk.yellow('‚ùå Aucun credentials trouv√©s'))
        console.log(
          chalk.gray(
            'üí° Utilisez une commande n√©cessitant Nexus pour configurer les credentials'
          )
        )
      }
    } catch (error) {
      console.error(
        chalk.red(`Erreur lors de la lecture des informations: ${error}`)
      )
    }
  }

  /**
   * M√©thode de compatibilit√© pour l'ancien syst√®me de tokens
   * @deprecated Utiliser getAuthToken() √† la place
   */
  async getToken(): Promise<string> {
    console.log(
      chalk.yellow('‚ö†Ô∏è  getToken() est d√©pr√©ci√©, utilisez getAuthToken()')
    )
    return this.getAuthToken()
  }
}
